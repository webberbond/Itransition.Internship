// <auto-generated />
using System;
using AuthAspApp.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AuthAspApp.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AuthAspApp.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastSignInDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SignUpDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "a2853a4c-73a0-43c8-bd2a-b99a2435a7bf",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2086b3c6-8876-46af-a97e-e2e4fd704110",
                            Email = "g.chubey13@gmail.com",
                            EmailConfirmed = false,
                            LastSignInDate = new DateTime(2022, 9, 29, 12, 49, 18, 373, DateTimeKind.Local).AddTicks(489),
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ad8d9648-ee75-40b8-95f2-807d7c0d3da7",
                            SignUpDate = new DateTime(2022, 9, 29, 12, 49, 18, 377, DateTimeKind.Local).AddTicks(278),
                            Status = 1,
                            TwoFactorEnabled = false,
                            UserName = "Grisha"
                        },
                        new
                        {
                            Id = "c6ef89b8-d7e6-4de7-9b98-8ba38685c4ef",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "79529aa8-98a3-48e7-aa55-40ba6757cb46",
                            Email = "helenfox@yahoo.com",
                            EmailConfirmed = false,
                            LastSignInDate = new DateTime(2022, 9, 29, 12, 49, 18, 377, DateTimeKind.Local).AddTicks(3107),
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cd91f0fe-3f9e-4d2c-9f54-f24fd82a7fe7",
                            SignUpDate = new DateTime(2022, 9, 29, 12, 49, 18, 377, DateTimeKind.Local).AddTicks(3145),
                            Status = 0,
                            TwoFactorEnabled = false,
                            UserName = "Helen"
                        },
                        new
                        {
                            Id = "b6dad1de-428b-4e15-9e13-99f21f429e73",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "97f7ac95-bced-45b8-857d-0c432126aebf",
                            Email = "19karimov82@hotmail.com",
                            EmailConfirmed = false,
                            LastSignInDate = new DateTime(2022, 9, 29, 12, 49, 18, 377, DateTimeKind.Local).AddTicks(3647),
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8b44aece-f121-4404-88f8-a50ab3db81cf",
                            SignUpDate = new DateTime(2022, 9, 29, 12, 49, 18, 377, DateTimeKind.Local).AddTicks(3649),
                            Status = 0,
                            TwoFactorEnabled = false,
                            UserName = "Azamat"
                        },
                        new
                        {
                            Id = "a309f118-ecef-4e30-aa0e-e9bcc13fb35f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "25611f05-1042-4b39-967e-baf4d1104c2d",
                            Email = "cla_udette6@gmail.com",
                            EmailConfirmed = false,
                            LastSignInDate = new DateTime(2022, 9, 29, 12, 49, 18, 377, DateTimeKind.Local).AddTicks(3661),
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3005b9eb-eb05-4bc3-a14a-70bd5f5fe13d",
                            SignUpDate = new DateTime(2022, 9, 29, 12, 49, 18, 377, DateTimeKind.Local).AddTicks(3663),
                            Status = 0,
                            TwoFactorEnabled = false,
                            UserName = "Claudette"
                        },
                        new
                        {
                            Id = "7accbd05-e608-4351-a586-35b8b1b9ebb1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "abffd0cf-2050-4610-8aaa-17537fcb5273",
                            Email = "persi.j@gmail.com",
                            EmailConfirmed = false,
                            LastSignInDate = new DateTime(2022, 9, 29, 12, 49, 18, 377, DateTimeKind.Local).AddTicks(3671),
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "86f95c8f-d85e-4d62-9ee8-2e13243c2808",
                            SignUpDate = new DateTime(2022, 9, 29, 12, 49, 18, 377, DateTimeKind.Local).AddTicks(3672),
                            Status = 0,
                            TwoFactorEnabled = false,
                            UserName = "Persi"
                        },
                        new
                        {
                            Id = "c75823ff-a592-4e00-92a7-12be2b8a6600",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8178b8c9-d4f7-409a-a987-70c88f0eb041",
                            Email = "mikh_1994_ail@hotmail.com",
                            EmailConfirmed = false,
                            LastSignInDate = new DateTime(2022, 9, 29, 12, 49, 18, 377, DateTimeKind.Local).AddTicks(3722),
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9a9eaa30-3115-4607-8ece-5c80c4be2502",
                            SignUpDate = new DateTime(2022, 9, 29, 12, 49, 18, 377, DateTimeKind.Local).AddTicks(3731),
                            Status = 0,
                            TwoFactorEnabled = false,
                            UserName = "Mikhail"
                        },
                        new
                        {
                            Id = "34b6b22b-d096-4ba0-b34b-e8841f199b22",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6253557b-745a-4659-badf-1b1e8255f0d8",
                            Email = "sergey.zrch@gmail.com@gmail.com",
                            EmailConfirmed = false,
                            LastSignInDate = new DateTime(2022, 9, 29, 12, 49, 18, 377, DateTimeKind.Local).AddTicks(3739),
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6acfa693-6ef4-41fa-bf5c-4b716d92404e",
                            SignUpDate = new DateTime(2022, 9, 29, 12, 49, 18, 377, DateTimeKind.Local).AddTicks(3740),
                            Status = 0,
                            TwoFactorEnabled = false,
                            UserName = "Sergey"
                        },
                        new
                        {
                            Id = "65efc2b6-c6dc-4000-9e8a-7c89910b35cb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d01b13fa-a31a-49aa-9677-600836184c65",
                            Email = "daya_18_flo@hotmail.com",
                            EmailConfirmed = false,
                            LastSignInDate = new DateTime(2022, 9, 29, 12, 49, 18, 377, DateTimeKind.Local).AddTicks(3748),
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "657f5105-149d-4674-b90f-cd3b84a89a07",
                            SignUpDate = new DateTime(2022, 9, 29, 12, 49, 18, 377, DateTimeKind.Local).AddTicks(3749),
                            Status = 0,
                            TwoFactorEnabled = false,
                            UserName = "Dayana"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("AuthAspApp.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("AuthAspApp.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthAspApp.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("AuthAspApp.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
